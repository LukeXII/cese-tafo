/*
 * API_LCD.h
 *
 *  Created on: Apr 9, 2022
 *      Author: Lucas
 */

#ifndef API_LCD_H_
#define API_LCD_H_

#include <stdbool.h>
#include "stm32f4xx_hal.h"  		/* <- HAL include */
#include "stm32f4xx_hal_spi.h"

#define LCD_SCREEN_HEIGHT 	240
#define LCD_SCREEN_WIDTH 	320

#define BLACK       		0x0000
#define NAVY        		0x000F
#define DARKGREEN   		0x03E0
#define DARKCYAN    		0x03EF
#define MAROON      		0x7800
#define PURPLE      		0x780F
#define OLIVE       		0x7BE0
#define LIGHTGREY   		0xC618
#define DARKGREY    		0x7BEF
#define BLUE        		0x001F
#define GREEN       		0x07E0
#define CYAN        		0x07FF
#define RED         		0xF800
#define MAGENTA     		0xF81F
#define YELLOW     			0xFFE0
#define WHITE       		0xFFFF
#define ORANGE      		0xFD20
#define GREENYELLOW 		0xAFE5
#define PINK        		0xF81F

#define CHAR_WIDTH 	6
#define CHAR_HEIGHT 8

static const unsigned char font[96][6] = {
	{0x00,0x00,0x00,0x00,0x00,0x00}, //
	{0x5c,0x00,0x00,0x00,0x00,0x00}, // !
	{0x06,0x00,0x06,0x00,0x00,0x00}, // "
	{0x28,0x7c,0x28,0x7c,0x28,0x00}, // #
	{0x5c,0x54,0xfe,0x54,0x74,0x00}, // $
	{0x44,0x20,0x10,0x08,0x44,0x00}, // %
	{0x28,0x54,0x54,0x20,0x50,0x00}, // &
	{0x06,0x00,0x00,0x00,0x00,0x00}, // '
	{0x38,0x44,0x00,0x00,0x00,0x00}, // (
	{0x44,0x38,0x00,0x00,0x00,0x00}, // )
	{0x02,0x07,0x02,0x00,0x00,0x00}, // *
	{0x10,0x10,0x7c,0x10,0x10,0x00}, // +
	{0xc0,0x00,0x00,0x00,0x00,0x00}, // ,
	{0x10,0x10,0x10,0x10,0x10,0x00}, // -
	{0x40,0x00,0x00,0x00,0x00,0x00}, // .
	{0x60,0x10,0x0c,0x00,0x00,0x00}, // /
	{0x7c,0x64,0x54,0x4c,0x7c,0x00}, // 0
	{0x48,0x7c,0x40,0x00,0x00,0x00}, // 1
	{0x64,0x54,0x54,0x54,0x48,0x00}, // 2
	{0x44,0x54,0x54,0x54,0x6c,0x00}, // 3
	{0x3c,0x20,0x70,0x20,0x20,0x00}, // 4
	{0x5c,0x54,0x54,0x54,0x24,0x00}, // 5
	{0x7c,0x54,0x54,0x54,0x74,0x00}, // 6
	{0x04,0x04,0x64,0x14,0x0c,0x00}, // 7
	{0x7c,0x54,0x54,0x54,0x7c,0x00}, // 8
	{0x5c,0x54,0x54,0x54,0x7c,0x00}, // 9
	{0x44,0x00,0x00,0x00,0x00,0x00}, // :
	{0xc4,0x00,0x00,0x00,0x00,0x00}, // ;
	{0x10,0x28,0x44,0x00,0x00,0x00}, // <
	{0x28,0x28,0x28,0x28,0x28,0x00}, // =
	{0x44,0x28,0x10,0x00,0x00,0x00}, // >
	{0x08,0x04,0x54,0x08,0x00,0x00}, // ?
	{0x7c,0x44,0x54,0x54,0x5c,0x00}, // @
	{0x7c,0x24,0x24,0x24,0x7c,0x00}, // A
	{0x7c,0x54,0x54,0x54,0x6c,0x00}, // B
	{0x7c,0x44,0x44,0x44,0x44,0x00}, // C
	{0x7c,0x44,0x44,0x44,0x38,0x00}, // D
	{0x7c,0x54,0x54,0x54,0x44,0x00}, // E
	{0x7c,0x14,0x14,0x14,0x04,0x00}, // F
	{0x7c,0x44,0x44,0x54,0x74,0x00}, // G
	{0x7c,0x10,0x10,0x10,0x7c,0x00}, // H
	{0x44,0x44,0x7c,0x44,0x44,0x00}, // I
	{0x60,0x40,0x40,0x44,0x7c,0x00}, // J
	{0x7c,0x10,0x10,0x28,0x44,0x00}, // K
	{0x7c,0x40,0x40,0x40,0x40,0x00}, // L
	{0x7c,0x08,0x10,0x08,0x7c,0x00}, // M
	{0x7c,0x08,0x10,0x20,0x7c,0x00}, // N
	{0x38,0x44,0x44,0x44,0x38,0x00}, // O
	{0x7c,0x14,0x14,0x14,0x08,0x00}, // P
	{0x3c,0x24,0x64,0x24,0x3c,0x00}, // Q
	{0x7c,0x14,0x14,0x14,0x68,0x00}, // R
	{0x5c,0x54,0x54,0x54,0x74,0x00}, // S
	{0x04,0x04,0x7c,0x04,0x04,0x00}, // T
	{0x7c,0x40,0x40,0x40,0x7c,0x00}, // U
	{0x0c,0x30,0x40,0x30,0x0c,0x00}, // V
	{0x3c,0x40,0x30,0x40,0x3c,0x00}, // W
	{0x44,0x28,0x10,0x28,0x44,0x00}, // X
	{0x0c,0x10,0x60,0x10,0x0c,0x00}, // Y
	{0x44,0x64,0x54,0x4c,0x44,0x00}, // Z
	{0x7c,0x44,0x00,0x00,0x00,0x00}, // [
	{0x0c,0x10,0x60,0x00,0x00,0x00}, // "\"
	{0x44,0x7c,0x00,0x00,0x00,0x00}, // ]
	{0x00,0x01,0x00,0x01,0x00,0x00}, // ^
	{0x40,0x40,0x40,0x40,0x40,0x40}, // _
	{0x00,0x01,0x00,0x00,0x00,0x00}, // `
	{0x7c,0x24,0x24,0x24,0x7c,0x00}, // a
	{0x7c,0x54,0x54,0x54,0x6c,0x00}, // b
	{0x7c,0x44,0x44,0x44,0x44,0x00}, // c
	{0x7c,0x44,0x44,0x44,0x38,0x00}, // d
	{0x7c,0x54,0x54,0x54,0x44,0x00}, // e
	{0x7c,0x14,0x14,0x14,0x04,0x00}, // f
	{0x7c,0x44,0x44,0x54,0x74,0x00}, // g
	{0x7c,0x10,0x10,0x10,0x7c,0x00}, // h
	{0x44,0x44,0x7c,0x44,0x44,0x00}, // i
	{0x60,0x40,0x40,0x44,0x7c,0x00}, // j
	{0x7c,0x10,0x10,0x28,0x44,0x00}, // k
	{0x7c,0x40,0x40,0x40,0x40,0x00}, // l
	{0x7c,0x08,0x10,0x08,0x7c,0x00}, // m
	{0x7c,0x08,0x10,0x20,0x7c,0x00}, // n
	{0x38,0x44,0x44,0x44,0x38,0x00}, // o
	{0x7c,0x14,0x14,0x14,0x08,0x00}, // p
	{0x3c,0x24,0x64,0x24,0x3c,0x00}, // q
	{0x7c,0x14,0x14,0x14,0x68,0x00}, // r
	{0x5c,0x54,0x54,0x54,0x74,0x00}, // s
	{0x04,0x04,0x7c,0x04,0x04,0x00}, // t
	{0x7c,0x40,0x40,0x40,0x7c,0x00}, // u
	{0x0c,0x30,0x40,0x30,0x0c,0x00}, // v
	{0x3c,0x40,0x30,0x40,0x3c,0x00}, // w
	{0x44,0x28,0x10,0x28,0x44,0x00}, // x
	{0x0c,0x10,0x60,0x10,0x0c,0x00}, // y
	{0x44,0x64,0x54,0x4c,0x44,0x00}, // z
	{0x10,0x7c,0x44,0x00,0x00,0x00}, // {
	{0x6c,0x00,0x00,0x00,0x00,0x00}, // |
	{0x44,0x7c,0x10,0x00,0x00,0x00}, // }
	{0x02,0x01,0x02,0x01,0x00,0x00}, // ~
	{0x00,0x00,0x00,0x00,0x00,0x00}
};

#define SCREEN_VERTICAL_1	0
#define SCREEN_HORIZONTAL_1	1
#define SCREEN_VERTICAL_2	2
#define SCREEN_HORIZONTAL_2	3

//RESET PIN AND PORT
#define	LCD_PORT_RST		GPIOB
#define	LCD_PIN_RST			GPIO_PIN_8

//DC PIN AND PORT
#define	LCD_PORT_DC			GPIOB
#define	LCD_PIN_DC			GPIO_PIN_9

//CS PIN AND PORT
#define	LCD_PORT_CS			GPIOA
#define	LCD_PIN_CS			GPIO_PIN_4

//LED PIN AND PORT
#define	LCD_PORT_LED		GPIOB
#define	LCD_PIN_LED			GPIO_PIN_15

#define BURST_MAX_SIZE 		500

typedef struct
{
	SPI_HandleTypeDef SPI_Handle;
	uint16_t LCDSizeX;
	uint16_t LCDSizeY;
}LCDHandle_t;

// Configura los pines del LCD
void LCD_Config(void);
// Inicializa el LCD
void LCD_Init(void);

void LCD_Error_Handler(void);

void LCD_Set_Rotation(uint8_t Rotation);
void LCD_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2);

void LCD_Write_Command(uint8_t Command);
void LCD_Write_Data(uint8_t Data);

void LCD_SPI_Send(unsigned char SPI_Data);

void LCD_Draw_Colour_Burst(uint16_t Colour, uint32_t Size);
void LCD_Fill_Screen(uint16_t Colour);
void LCD_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour);
void LCD_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour);
void LCD_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour);
void LCD_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour);
void LCD_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour);
void LCD_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour);
void LCD_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour);
void LCD_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour);
void LCD_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour);
void LCD_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour);


#endif /* API_INC_API_LCD_H_ */
